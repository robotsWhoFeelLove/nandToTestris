// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//// Replace this comment with your code.
  
    Mux16(a= instruction , b= aluOutput, sel= instruction[15], 
        out= toAreg );
    // Variables
    And16(a= instruction, b=instruction ,
        out[15]=control,
        out[0..2]= jmp,
        out[5]= aDest,
        out[4]= dDest,
        out[3]= writeDest,
        out[12]= a,
        out[11]= zx,
        out[10]= nx,
        out[9]= zy,
        out[8]= ny,
        out[7]= f,
        out[6]= no
         );
    And(a= control, b= writeDest, out= writeM );

    // A Reg
    Mux(a= true, b= aDest, sel= control, out= loadA);
    ARegister(in= toAreg, load= loadA, out=fromAReg);
    And(a= control, b=a , out= insOrMem);
    Mux16(a= fromAReg, b= inM, sel= insOrMem, 
            out= y);
    // D Reg
    And(a=dDest , b=control , out= loadD);
    DRegister(in=aluOutput , load=loadD , out= x);
    ALU(x= x, y= y, zx= zx, nx= nx, zy=zy , ny= ny, f=f, no= no, out=aluOutput,out=outM , zr=zr , ng=ng );

    // addressM
    And16(a= fromAReg, b= fromAReg, out[0..14]= addressM);

    // JMP Logic Engine
    Not(in= zr, out=notZr );
    Not(in= ng , out= notNg);
    And(a= notNg, b=notZr , out= gt );
    Or(a= gt, b=zr , out=gtOrZr );
    Or(a= ng, b= zr, out=ltOrZr );
    Mux8Way16(a= false , b[0]=gt  , c[0]= zr, d[0]=gtOrZr , e[0]= ng, f[0]=notZr , g[0]= ltOrZr, h=true , sel= jmp, out[0]= jmpPC );

    And(a= jmpPC, b= control, out=jmpPC2 );
    Not(in=jmpPC2 , out= inc);

    // PC
    PC(in= fromAReg , load=jmpPC2 , inc=inc , reset= reset, out[0..14]=pc );


}   